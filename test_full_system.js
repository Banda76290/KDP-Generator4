import XLSX from 'xlsx';
import path from 'path';
import { fileURLToPath } from 'url';
import { KdpRoyaltiesEstimatorProcessor } from './server/services/kdpRoyaltiesEstimatorProcessor.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Test complet du syst√®me avec le fichier r√©el
const filePath = path.join(__dirname, 'attached_assets', 'KDP_Royalties_Estimator-220b6953-068f-43da-9ffb-b76f37306c23_1754552046164.xlsx');

console.log('=== TEST COMPLET DU SYST√àME KDP ROYALTIES ESTIMATOR ===');
console.log('Fichier:', filePath);

try {
  const workbook = XLSX.readFile(filePath);
  
  // 1. Test de d√©tection
  const isDetected = KdpRoyaltiesEstimatorProcessor.detectKdpRoyaltiesEstimator(workbook);
  console.log('\n1. D√âTECTION:', isDetected ? 'R√âUSSIE ‚úÖ' : '√âCHOU√âE ‚ùå');
  
  if (isDetected) {
    // 2. Simulation du traitement complet
    console.log('\n2. TRAITEMENT COMPLET:');
    
    const importId = 'test-import-' + Date.now();
    const userId = 'test-user-123';
    
    console.log(`   Import ID: ${importId}`);
    console.log(`   User ID: ${userId}`);
    
    try {
      const result = await KdpRoyaltiesEstimatorProcessor.processKdpRoyaltiesEstimator(
        workbook,
        importId,
        userId
      );
      
      console.log('\n‚úÖ TRAITEMENT R√âUSSI:');
      console.log(`   üìä Total lignes trait√©es: ${result.totalProcessed}`);
      console.log(`   üéØ Lignes filtr√©es sauv√©es: ${result.filteredRecords}`);
      console.log(`   üìÑ Onglets trait√©s: ${result.processedSheets.join(', ')}`);
      
      // 3. V√©rification des r√©sultats attendus
      console.log('\n3. V√âRIFICATION DES R√âSULTATS:');
      
      const expectedFilteredCount = 44; // Bas√© sur notre analyse pr√©c√©dente
      const actualFilteredCount = result.filteredRecords;
      
      if (actualFilteredCount === expectedFilteredCount) {
        console.log(`   ‚úÖ Nombre de lignes filtr√©es CORRECT: ${actualFilteredCount}`);
      } else {
        console.log(`   ‚ùå Nombre de lignes filtr√©es INCORRECT:`);
        console.log(`      Attendu: ${expectedFilteredCount}`);
        console.log(`      Re√ßu: ${actualFilteredCount}`);
      }
      
      // 4. V√©rification des onglets trait√©s
      const expectedSheets = ['Combined Sales', 'eBook Royalty', 'Paperback Royalty', 'Hardcover Royalty'];
      const actualSheets = result.processedSheets;
      
      const allSheetsProcessed = expectedSheets.every(sheet => actualSheets.includes(sheet));
      
      if (allSheetsProcessed) {
        console.log(`   ‚úÖ Tous les onglets attendus trait√©s: ${actualSheets.join(', ')}`);
      } else {
        console.log(`   ‚ùå Onglets manquants:`);
        expectedSheets.forEach(sheet => {
          if (!actualSheets.includes(sheet)) {
            console.log(`      - ${sheet}`);
          }
        });
      }
      
      // 5. V√©rification des erreurs
      if (result.errors.length === 0) {
        console.log(`   ‚úÖ Aucune erreur de traitement`);
      } else {
        console.log(`   ‚ö†Ô∏è  ${result.errors.length} erreurs d√©tect√©es:`);
        result.errors.slice(0, 5).forEach((error, index) => {
          console.log(`      ${index + 1}. ${error}`);
        });
      }
      
      console.log('\n=== R√âSUM√â FINAL ===');
      
      const isSuccess = (
        actualFilteredCount === expectedFilteredCount &&
        allSheetsProcessed &&
        result.errors.length === 0
      );
      
      if (isSuccess) {
        console.log('üéâ SYST√àME ENTI√àREMENT FONCTIONNEL!');
        console.log('   ‚úì D√©tection correcte du fichier KDP_Royalties_Estimator');
        console.log('   ‚úì Filtrage pr√©cis des transaction types cibl√©s');
        console.log('   ‚úì Traitement de tous les onglets royalty');
        console.log('   ‚úì Aucune erreur de traitement');
        console.log('\nüöÄ Le syst√®me est pr√™t pour traiter de vrais revenus KDP avec:');
        console.log('   - Free - Promotion (eBook)');
        console.log('   - Expanded Distribution Channels (Paperback)');
      } else {
        console.log('‚ùå DES AM√âLIORATIONS SONT N√âCESSAIRES');
      }
      
    } catch (processingError) {
      console.log('‚ùå ERREUR TRAITEMENT:', processingError.message);
      console.log('   Stack:', processingError.stack);
    }
    
  } else {
    console.log('‚ùå Impossible de continuer: d√©tection √©chou√©e');
  }
  
} catch (error) {
  console.error('‚ùå ERREUR SYST√àME:', error.message);
  console.error('   Stack:', error.stack);
}