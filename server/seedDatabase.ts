import { readFileSync } from 'fs';
import { db } from './db.js';
import { marketplaceCategories } from '@shared/schema';
import { sql } from 'drizzle-orm';

/**
 * Seeds the database with initial data required for the application
 * This runs automatically during deployment and on first startup
 */
export async function seedDatabase() {
  const timestamp = new Date().toISOString();
  
  try {
    console.log(`[${timestamp}] üå± [SEED-DB] D√©marrage du seeding de la base de donn√©es...`);
    
    // Check if categories already exist
    console.log(`[${timestamp}] üîç [SEED-DB] V√©rification des cat√©gories existantes...`);
    const existingCategories = await db.select().from(marketplaceCategories).limit(1);
    
    if (existingCategories.length > 0) {
      console.log(`[${timestamp}] ‚úÖ [SEED-DB] Base d√©j√† peupl√©e, arr√™t du seeding`);
      console.log(`[${timestamp}] üìä [SEED-DB] Cat√©gories trouv√©es, pas de modification n√©cessaire`);
      return;
    }
    
    console.log(`[${timestamp}] üì¶ [SEED-DB] Base vide d√©tect√©e, d√©but du peuplement...`);
    console.log(`[${timestamp}] üìñ [SEED-DB] Lecture du fichier complete-categories.sql...`);
    
    // Read and execute the SQL file
    const sqlContent = readFileSync('./complete-categories.sql', 'utf-8');
    console.log(`[${timestamp}] üìè [SEED-DB] Fichier SQL lu: ${sqlContent.length} caract√®res`);
    
    // Split SQL into individual statements and execute them
    const statements = sqlContent
      .split(';')
      .map(stmt => stmt.trim())
      .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'));
    
    console.log(`[${timestamp}] üî¢ [SEED-DB] ${statements.length} instructions SQL identifi√©es`);
    console.log(`[${timestamp}] ‚ö° [SEED-DB] Ex√©cution des instructions SQL...`);
    
    let insertCount = 0;
    let deleteCount = 0;
    
    for (let i = 0; i < statements.length; i++) {
      const stmt = statements[i].trim();
      if (stmt) {
        try {
          await db.execute(sql.raw(stmt));
          
          if (stmt.startsWith('DELETE')) {
            deleteCount++;
            if (deleteCount === 1) console.log(`[${timestamp}] üóëÔ∏è [SEED-DB] Suppression des donn√©es existantes...`);
          } else if (stmt.startsWith('INSERT')) {
            insertCount++;
            if (insertCount === 1) console.log(`[${timestamp}] üìù [SEED-DB] D√©but des insertions...`);
            if (insertCount % 50 === 0) console.log(`[${timestamp}] üìä [SEED-DB] ${insertCount} cat√©gories ins√©r√©es...`);
          }
          
          if (i === statements.length - 1) console.log(`[${timestamp}] üèÅ [SEED-DB] Derni√®re instruction ex√©cut√©e`);
        } catch (error) {
          console.error(`[${timestamp}] ‚ùå [SEED-DB] Erreur instruction ${i + 1}: ${stmt.substring(0, 100)}...`);
          console.error(`[${timestamp}] üîç [SEED-DB] Erreur d√©taill√©e:`, error);
          throw error;
        }
      }
    }
    
    console.log(`[${timestamp}] üìà [SEED-DB] Statistiques: ${deleteCount} suppressions, ${insertCount} insertions`);
    
    // Verify seeding
    console.log(`[${timestamp}] üîç [SEED-DB] V√©rification du r√©sultat...`);
    const categoryCount = await db.select().from(marketplaceCategories);
    console.log(`[${timestamp}] ‚úÖ [SEED-DB] Succ√®s! ${categoryCount.length} cat√©gories marketplace ins√©r√©es`);
    console.log(`[${timestamp}] üéØ [SEED-DB] Seeding termin√© avec succ√®s`);
    
  } catch (error) {
    console.error(`[${timestamp}] ‚ùå [SEED-DB] Erreur lors du seeding:`, error);
    console.error(`[${timestamp}] üîç [SEED-DB] Stack trace:`, error instanceof Error ? error.stack : 'Non disponible');
    console.error(`[${timestamp}] ‚ö†Ô∏è [SEED-DB] L'application peut fonctionner sans cat√©gories`);
    // Don't throw error to prevent app from crashing
    // Log and continue - the app can still function without categories
  }
}

/**
 * Force re-seed the database (useful for development/updates)
 */
export async function forceSeedDatabase() {
  const timestamp = new Date().toISOString();
  
  try {
    console.log(`[${timestamp}] üî• [FORCE-SEED] D√âBUT DU FORCE SEEDING (suppression compl√®te)`);
    console.log(`[${timestamp}] ‚ö†Ô∏è [FORCE-SEED] ATTENTION: Toutes les cat√©gories vont √™tre supprim√©es`);
    
    // Count existing categories first
    const existingCount = await db.select().from(marketplaceCategories);
    console.log(`[${timestamp}] üìä [FORCE-SEED] Cat√©gories existantes trouv√©es: ${existingCount.length}`);
    
    if (existingCount.length > 0) {
      console.log(`[${timestamp}] üîç [FORCE-SEED] √âchantillon de cat√©gories existantes:`);
      existingCount.slice(0, 3).forEach((cat, i) => {
        console.log(`[${timestamp}] üìù [FORCE-SEED] ${i+1}. ID: ${cat.id}, Path: ${cat.categoryPath}, Level: ${cat.level}`);
      });
    }

    // Clear existing categories
    console.log(`[${timestamp}] üóëÔ∏è [FORCE-SEED] D√©but de la suppression de ${existingCount.length} cat√©gories existantes...`);
    const deleteResult = await db.delete(marketplaceCategories);
    console.log(`[${timestamp}] ‚úÖ [FORCE-SEED] Suppression termin√©e - R√©sultat: ${JSON.stringify(deleteResult)}`);
    
    // Verify deletion
    const verifyEmpty = await db.select().from(marketplaceCategories);
    console.log(`[${timestamp}] üîç [FORCE-SEED] V√©rification post-suppression: ${verifyEmpty.length} cat√©gories restantes`);
    if (verifyEmpty.length > 0) {
      console.error(`[${timestamp}] ‚ö†Ô∏è [FORCE-SEED] PROBL√àME: ${verifyEmpty.length} cat√©gories n'ont pas √©t√© supprim√©es!`);
    } else {
      console.log(`[${timestamp}] ‚úÖ [FORCE-SEED] Table compl√®tement vid√©e`);
    }
    
    // Re-seed without checking for existing data
    console.log(`[${timestamp}] üîÑ [FORCE-SEED] Lancement du seeding complet...`);
    console.log(`[${timestamp}] üìñ [FORCE-SEED] Lecture du fichier complete-categories.sql...`);
    
    // Read and execute the SQL file directly (bypass existing data check)
    const sqlContent = readFileSync('./complete-categories.sql', 'utf-8');
    console.log(`[${timestamp}] üìè [FORCE-SEED] Fichier SQL lu: ${sqlContent.length} caract√®res`);
    
    // Split SQL into individual statements and execute them (skip DELETE statements since we already cleared)
    const statements = sqlContent
      .split(';')
      .map(stmt => stmt.trim())
      .filter(stmt => stmt.length > 0 && !stmt.startsWith('--') && !stmt.startsWith('DELETE'));
    
    console.log(`[${timestamp}] üî¢ [FORCE-SEED] ${statements.length} instructions SQL identifi√©es (DELETE ignor√©es car d√©j√† supprim√©)`);
    console.log(`[${timestamp}] ‚ö° [FORCE-SEED] Ex√©cution des instructions SQL...`);
    
    let insertCount = 0;
    let deleteCount = 0;
    
    for (let i = 0; i < statements.length; i++) {
      const stmt = statements[i].trim();
      if (stmt) {
        console.log(`[${timestamp}] üîÑ [FORCE-SEED] Ex√©cution instruction ${i + 1}/${statements.length}: ${stmt.substring(0, 150)}...`);
        
        try {
          const result = await db.execute(sql.raw(stmt));
          console.log(`[${timestamp}] ‚úÖ [FORCE-SEED] Instruction ${i + 1} ex√©cut√©e - R√©sultat: ${JSON.stringify(result)}`);
          
          if (stmt.startsWith('DELETE')) {
            deleteCount++;
            console.log(`[${timestamp}] üóëÔ∏è [FORCE-SEED] Suppression ${deleteCount} effectu√©e`);
          } else if (stmt.startsWith('INSERT')) {
            insertCount++;
            console.log(`[${timestamp}] üìù [FORCE-SEED] Insertion ${insertCount} effectu√©e`);
            
            // V√©rifier les 10 premi√®res insertions en d√©tail
            if (insertCount <= 10) {
              const match = stmt.match(/VALUES\s*\('([^']+)',\s*'([^']+)',\s*'([^']+)',\s*'([^']+)',\s*(\d+)/);
              if (match) {
                console.log(`[${timestamp}] üîç [FORCE-SEED] D√©tails insertion ${insertCount}: ID=${match[1]}, Marketplace=${match[2]}, Path=${match[3]}, Parent=${match[4]}, Level=${match[5]}`);
              }
            }
            
            // Logs de progression
            if (insertCount % 25 === 0) console.log(`[${timestamp}] üìä [FORCE-SEED] Progression: ${insertCount}/${statements.length} cat√©gories ins√©r√©es (${Math.round((insertCount/statements.length)*100)}%)`);
          }
          
          // V√©rifier l'√©tat de la base apr√®s chaque insertion des 5 premi√®res
          if (insertCount <= 5) {
            const currentCount = await db.select().from(marketplaceCategories);
            console.log(`[${timestamp}] üìà [FORCE-SEED] √âtat actuel de la base: ${currentCount.length} cat√©gories total`);
          }
          
          if (i === statements.length - 1) {
            console.log(`[${timestamp}] üèÅ [FORCE-SEED] Derni√®re instruction ex√©cut√©e avec succ√®s`);
          }
        } catch (error) {
          console.error(`[${timestamp}] ‚ùå [FORCE-SEED] ERREUR instruction ${i + 1}/${statements.length}`);
          console.error(`[${timestamp}] üìÑ [FORCE-SEED] Instruction √©chou√©e: ${stmt}`);
          console.error(`[${timestamp}] üîç [FORCE-SEED] Type d'erreur: ${error instanceof Error ? error.constructor.name : typeof error}`);
          console.error(`[${timestamp}] üí¨ [FORCE-SEED] Message d'erreur: ${error instanceof Error ? error.message : String(error)}`);
          console.error(`[${timestamp}] üìç [FORCE-SEED] Stack trace:`, error instanceof Error ? error.stack : 'Non disponible');
          
          // V√©rifier l'√©tat de la base en cas d'erreur
          const errorCount = await db.select().from(marketplaceCategories);
          console.error(`[${timestamp}] üìä [FORCE-SEED] √âtat de la base lors de l'erreur: ${errorCount.length} cat√©gories`);
          
          throw error;
        }
      }
    }
    
    console.log(`[${timestamp}] üìà [FORCE-SEED] Statistiques: ${deleteCount} suppressions, ${insertCount} insertions`);
    
    // Verify seeding with detailed analysis
    console.log(`[${timestamp}] üîç [FORCE-SEED] D√©but de la v√©rification compl√®te du r√©sultat...`);
    const categoryCount = await db.select().from(marketplaceCategories);
    console.log(`[${timestamp}] üìä [FORCE-SEED] Nombre total de cat√©gories ins√©r√©es: ${categoryCount.length}`);
    
    // Analyser par niveau (utilisation d'ORM plut√¥t que SQL brut)
    try {
      console.log(`[${timestamp}] üìà [FORCE-SEED] R√©partition par niveau:`);
      const level1Count = categoryCount.filter(c => c.level === 1).length;
      const level2Count = categoryCount.filter(c => c.level === 2).length;
      const level3Count = categoryCount.filter(c => c.level === 3).length;
      const level4Count = categoryCount.filter(c => c.level === 4).length;
      const level5Count = categoryCount.filter(c => c.level === 5).length;
      const level6PlusCount = categoryCount.filter(c => c.level >= 6).length;
      
      console.log(`[${timestamp}] üìä [FORCE-SEED] Niveau 1: ${level1Count} cat√©gories`);
      console.log(`[${timestamp}] üìä [FORCE-SEED] Niveau 2: ${level2Count} cat√©gories`);
      console.log(`[${timestamp}] üìä [FORCE-SEED] Niveau 3: ${level3Count} cat√©gories`);
      console.log(`[${timestamp}] üìä [FORCE-SEED] Niveau 4: ${level4Count} cat√©gories`);
      console.log(`[${timestamp}] üìä [FORCE-SEED] Niveau 5: ${level5Count} cat√©gories`);
      console.log(`[${timestamp}] üìä [FORCE-SEED] Niveau 6+: ${level6PlusCount} cat√©gories`);
    } catch (levelError) {
      console.error(`[${timestamp}] ‚ö†Ô∏è [FORCE-SEED] Erreur lors de l'analyse par niveau:`, levelError);
    }
    
    // Analyser par marketplace (utilisation d'ORM plut√¥t que SQL brut)
    try {
      console.log(`[${timestamp}] üåç [FORCE-SEED] R√©partition par marketplace:`);
      const marketplaces = [...new Set(categoryCount.map(c => c.marketplace))];
      
      marketplaces.forEach(marketplace => {
        const count = categoryCount.filter(c => c.marketplace === marketplace).length;
        console.log(`[${timestamp}] üìä [FORCE-SEED] ${marketplace}: ${count} cat√©gories`);
      });
    } catch (marketplaceError) {
      console.error(`[${timestamp}] ‚ö†Ô∏è [FORCE-SEED] Erreur lors de l'analyse par marketplace:`, marketplaceError);
    }
    
    // V√©rifier l'int√©grit√© des donn√©es
    console.log(`[${timestamp}] üîç [FORCE-SEED] V√©rification de l'int√©grit√© des donn√©es...`);
    
    // √âchantillon des cat√©gories cr√©√©es
    const sampleCategories = categoryCount.slice(0, 5);
    console.log(`[${timestamp}] üìù [FORCE-SEED] √âchantillon des cat√©gories cr√©√©es:`);
    sampleCategories.forEach((cat, i) => {
      console.log(`[${timestamp}] üìÑ [FORCE-SEED] ${i+1}. ID: "${cat.id}", Marketplace: "${cat.marketplace}", Path: "${cat.categoryPath}", Level: ${cat.level}, S√©lectionnable: ${cat.isSelectable}`);
    });
    
    // V√©rifier les niveaux racines critiques
    const level1Count = categoryCount.filter(c => c.level === 1).length;
    const level2Count = categoryCount.filter(c => c.level === 2).length;
    const level3Count = categoryCount.filter(c => c.level === 3).length;
    
    console.log(`[${timestamp}] üå≥ [FORCE-SEED] V√©rification hi√©rarchie:`);
    console.log(`[${timestamp}] üìä [FORCE-SEED] Niveau 1 (racines): ${level1Count} cat√©gories`);
    console.log(`[${timestamp}] üìä [FORCE-SEED] Niveau 2 (sous-cat√©gories): ${level2Count} cat√©gories`);
    console.log(`[${timestamp}] üìä [FORCE-SEED] Niveau 3 (branches): ${level3Count} cat√©gories`);
    
    // Statut final
    if (categoryCount.length === 249) {
      console.log(`[${timestamp}] ‚úÖ [FORCE-SEED] SUCC√àS COMPLET: 249 cat√©gories ins√©r√©es comme attendu`);
      if (level1Count > 0 && level2Count > 0 && level3Count > 0) {
        console.log(`[${timestamp}] ‚úÖ [FORCE-SEED] Hi√©rarchie compl√®te confirm√©e avec tous les niveaux racines`);
      } else {
        console.log(`[${timestamp}] ‚ö†Ô∏è [FORCE-SEED] ATTENTION: Hi√©rarchie incompl√®te d√©tect√©e`);
      }
    } else {
      console.error(`[${timestamp}] ‚ùå [FORCE-SEED] PROBL√àME: ${categoryCount.length} cat√©gories au lieu de 249 attendues`);
      console.error(`[${timestamp}] üîç [FORCE-SEED] Diff√©rence: ${249 - categoryCount.length} cat√©gories manquantes`);
    }
    
    console.log(`[${timestamp}] ‚úÖ [FORCE-SEED] Force seeding termin√© avec succ√®s`);
    console.log(`[${timestamp}] üéØ [FORCE-SEED] Base de donn√©es compl√®tement reconstruite`);
  } catch (error) {
    console.error(`[${timestamp}] ‚ùå [FORCE-SEED] Erreur critique lors du force seeding:`, error);
    console.error(`[${timestamp}] üîç [FORCE-SEED] Stack trace:`, error instanceof Error ? error.stack : 'Non disponible');
    console.error(`[${timestamp}] üö® [FORCE-SEED] √âTAT DE LA BASE INCERTAIN - DONN√âES POSSIBLEMENT CORROMPUES`);
    throw error;
  }
}