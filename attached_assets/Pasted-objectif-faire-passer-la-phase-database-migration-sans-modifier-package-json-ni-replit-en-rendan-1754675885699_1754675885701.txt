objectif
faire passer la phase “database migration” sans modifier package.json ni .replit, en rendant drizzle.config.ts auto-suffisant (aucun import de drizzle-kit requis).

contexte
erreur actuelle : Cannot find module 'drizzle-kit' dans drizzle.config.ts pendant npx drizzle-kit push

raison : la config ts importe drizzle-kit (ex. import { defineConfig } from 'drizzle-kit' ou satisfies Config), or devDependencies absentes en prod.

cible : laisser replit auto-détecter drizzle et exécuter push, mais avec une config qui ne dépend d’aucun import.

fais exactement ceci
ouvrir drizzle.config.ts et afficher le contenu.

si on voit un import ... from 'drizzle-kit', ou un typage satisfies Config, on remplace tout le fichier par cette version minimaliste sans aucun import :

ts
Copier
Modifier
// drizzle.config.ts — version autonome (aucun import requis)
const { DATABASE_URL } = process.env;

if (!DATABASE_URL) {
  throw new Error('DATABASE_URL manquant pour drizzle-kit');
}

export default {
  out: './migrations',
  schema: './shared/schema.ts', // garde le chemin actuel si différent
  dialect: 'postgresql',
  dbCredentials: { url: DATABASE_URL },
  // optionnel : migrations: { table: '__drizzle_migrations', schema: 'drizzle' },
};
important : aucun import au sommet du fichier. pas de defineConfig, pas de types.

si le fichier est protégé, demande-moi de le déverrouiller, puis applique le remplacement.

smoke test en workspace (pas en déploiement)

exécute :

bash
Copier
Modifier
npx drizzle-kit --version
npx drizzle-kit push --config=drizzle.config.ts --verbose || true
attendu : pas d’erreur “Cannot find module 'drizzle-kit'”. s’il n’y a aucune migration, la commande termine sans appliquer de SQL, c’est OK.

déploiement standard, sans hack

Build command : npm run build (inchangé)

Database migration : auto-détection (inchangée)

Start command : npm run start (inchangé)

lance un Deploy complet et fournis les 150 dernières lignes de logs de la phase “database migration” puis du “start”.

si, malgré tout, la phase migration échoue encore

affiche précisément la commande que replit exécute (détection auto) et la stack.

si l’erreur concerne la lecture d’ENV, loggue :

bash
Copier
Modifier
node -e "console.log('has DATABASE_URL:', !!process.env.DATABASE_URL)"
si l’erreur n’est plus “module not found” mais autre (permissions/ssl), colle le message brut et n’essaie pas d’éditer package.json.

critères de succès
plus aucune erreur “Cannot find module 'drizzle-kit'” pendant la migration,

la phase “database migration” passe,

le serveur démarre ensuite normalement.